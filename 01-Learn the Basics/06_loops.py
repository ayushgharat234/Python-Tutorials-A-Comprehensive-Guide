"""
Loops in Python:

Loops are used for iterating over sequences or executing a block of code repeatedly.
- `for`: Iterates over a sequence (e.g., list, tuple, string, range, etc.).
- `while`: Repeats the block of code as long as a specified condition is true.
"""

# Example 1: For loop
print("For loop example:")
for i in range(5):  # Looping from 0 to 4
    print(i)

# Explanation:
# The `for` loop iterates over a sequence generated by `range(5)`, which produces the numbers 0, 1, 2, 3, and 4.
# On each iteration, the variable `i` takes the value of the current number in the sequence and prints it.

# Example 2: While loop
print("\nWhile loop example:")
count = 0
while count < 5:  # Loop continues while count is less than 5
    print(count)
    count += 1  # Increment count by 1

# Explanation:
# The `while` loop checks if the condition `count < 5` is true.
# As long as the condition holds, the loop will continue to execute, printing the value of `count` and incrementing it.
# Once `count` reaches 5, the condition becomes false, and the loop terminates.

# Example 3: Looping through a list
colors = ["red", "green", "blue"]
print("\nLoop through a list:")
for color in colors:
    print(color)

# Explanation:
# This `for` loop iterates through each element in the `colors` list.
# The variable `color` takes on each value ("red", "green", "blue") on each iteration and prints it.

# Example 4: Nested loops (loop within a loop)
print("\nNested loop example:")
for i in range(3):
    for j in range(2):
        print(f"i={i}, j={j}")

# Explanation:
# In a nested loop, one loop runs inside another. In this example, the outer loop iterates over `i` (from 0 to 2),
# and for each iteration of `i`, the inner loop runs over `j` (from 0 to 1).
# This results in a total of 6 prints, with the value of `i` and `j` changing in each iteration.

# Example 5: Using `break` and `continue` in loops
print("\nBreak and Continue example:")

# Using `break` to exit a loop early
for i in range(5):
    if i == 3:
        break  # Exit the loop when i equals 3
    print(i)

print("After break:")

# Using `continue` to skip the current iteration and move to the next
for i in range(5):
    if i == 3:
        continue  # Skip the current iteration when i equals 3
    print(i)

# Explanation:
# - The `break` statement causes the loop to terminate when `i` reaches 3, so the output is "0, 1, 2".
# - The `continue` statement skips the rest of the current iteration and moves to the next iteration when `i` equals 3,
#   so the output is "0, 1, 2, 4" (it skips printing when `i` is 3).

"""
Key Concepts:
1. **For Loop**:
   - Iterates over a sequence (like a list, string, or range).
   - Can be used to perform an action for each item in a collection.

2. **While Loop**:
   - Repeats as long as the given condition is true.
   - Useful for situations where the number of iterations is not known in advance.

3. **Nested Loops**:
   - A loop inside another loop, useful when dealing with multi-dimensional data structures.

4. **Break Statement**:
   - Exits the loop immediately, even if the loop's condition is not false.

5. **Continue Statement**:
   - Skips the rest of the current iteration and moves to the next iteration of the loop.

6. **Range Function**:
   - Used with the `for` loop to generate a sequence of numbers.
   - Can specify start, stop, and step values (e.g., `range(1, 10, 2)` generates numbers from 1 to 9 with a step of 2).

"""